# coding: utf-8

"""
    \"Agent Toolkit: LLM-Friendly Tools and Search APIs\"

    API for LLM-friendly web search and content retrieval

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from at_client.models.api_key_status import ApiKeyStatus
from at_client.models.rate_limit_tier import RateLimitTier

class ApiKeyInfo(BaseModel):
    """
    Schema for API key information (without the actual key)  # noqa: E501
    """
    key_id: StrictStr = Field(default=..., description="Unique identifier for the API key")
    name: StrictStr = Field(default=..., description="Name/description for this API key")
    tier: RateLimitTier = Field(default=..., description="Rate limit tier")
    status: ApiKeyStatus = Field(default=..., description="Status of the API key")
    created_at: datetime = Field(default=..., description="When the key was created")
    last_used_at: Optional[datetime] = None
    rate_limit: StrictInt = Field(default=..., description="Requests per minute allowed")
    __properties = ["key_id", "name", "tier", "status", "created_at", "last_used_at", "rate_limit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiKeyInfo:
        """Create an instance of ApiKeyInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if last_used_at (nullable) is None
        # and __fields_set__ contains the field
        if self.last_used_at is None and "last_used_at" in self.__fields_set__:
            _dict['last_used_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiKeyInfo:
        """Create an instance of ApiKeyInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiKeyInfo.parse_obj(obj)

        _obj = ApiKeyInfo.parse_obj({
            "key_id": obj.get("key_id"),
            "name": obj.get("name"),
            "tier": obj.get("tier"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "last_used_at": obj.get("last_used_at"),
            "rate_limit": obj.get("rate_limit")
        })
        return _obj


