# coding: utf-8

"""
    \"Agent Toolkit: LLM-Friendly Tools and Search APIs\"

    API for LLM-friendly web search and content retrieval

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreditResponse(BaseModel):
    """
    Schema for the credit usage response.  # noqa: E501
    """
    total_credits: StrictInt = Field(...)
    used_credits: StrictInt = Field(...)
    remaining_credits: StrictInt = Field(...)
    free_credits: StrictInt = Field(...)
    purchased_credits: Optional[StrictInt] = 0
    period: StrictStr = Field(...)
    reset_date: StrictStr = Field(...)
    days_until_reset: StrictInt = Field(...)
    plan_tier: Optional[StrictStr] = None
    __properties = ["total_credits", "used_credits", "remaining_credits", "free_credits", "purchased_credits", "period", "reset_date", "days_until_reset", "plan_tier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditResponse:
        """Create an instance of CreditResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if plan_tier (nullable) is None
        # and __fields_set__ contains the field
        if self.plan_tier is None and "plan_tier" in self.__fields_set__:
            _dict['plan_tier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditResponse:
        """Create an instance of CreditResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditResponse.parse_obj(obj)

        _obj = CreditResponse.parse_obj({
            "total_credits": obj.get("total_credits"),
            "used_credits": obj.get("used_credits"),
            "remaining_credits": obj.get("remaining_credits"),
            "free_credits": obj.get("free_credits"),
            "purchased_credits": obj.get("purchased_credits") if obj.get("purchased_credits") is not None else 0,
            "period": obj.get("period"),
            "reset_date": obj.get("reset_date"),
            "days_until_reset": obj.get("days_until_reset"),
            "plan_tier": obj.get("plan_tier")
        })
        return _obj


