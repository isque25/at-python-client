# coding: utf-8

"""
    \"Agent Toolkit: LLM-Friendly Tools and Search APIs\"

    API for LLM-friendly web search and content retrieval

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class ExtractRequest(BaseModel):
    """
    Schema for extract request.  # noqa: E501
    """
    urls: conlist(StrictStr) = Field(default=..., description="List of URLs to extract content from.")
    include_images: Optional[StrictBool] = Field(default=False, description="Include images in the response.")
    include_links: Optional[StrictBool] = Field(default=False, description="Include internal links found on the page in the response.")
    extract_depth: Optional[StrictStr] = Field(default='basic', description="Depth of extraction. 'advanced' retrieves more data including tables and embedded content.")
    __properties = ["urls", "include_images", "include_links", "extract_depth"]

    @validator('extract_depth')
    def extract_depth_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('basic', 'advanced',):
            raise ValueError("must be one of enum values ('basic', 'advanced')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExtractRequest:
        """Create an instance of ExtractRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExtractRequest:
        """Create an instance of ExtractRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExtractRequest.parse_obj(obj)

        _obj = ExtractRequest.parse_obj({
            "urls": obj.get("urls"),
            "include_images": obj.get("include_images") if obj.get("include_images") is not None else False,
            "include_links": obj.get("include_links") if obj.get("include_links") is not None else False,
            "extract_depth": obj.get("extract_depth") if obj.get("extract_depth") is not None else 'basic'
        })
        return _obj


