# coding: utf-8

"""
    \"Agent Toolkit: LLM-Friendly Tools and Search APIs\"

    API for LLM-friendly web search and content retrieval

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class ExtractResult(BaseModel):
    """
    Schema for a successful extraction result.  # noqa: E501
    """
    url: StrictStr = Field(default=..., description="The URL from which content was extracted.")
    raw_content: StrictStr = Field(default=..., description="The full content extracted from the page.")
    images: Optional[conlist(StrictStr)] = None
    links: Optional[conlist(StrictStr)] = None
    cache_hit: Optional[StrictBool] = Field(default=False, description="Indicates if this result was served from cache.")
    __properties = ["url", "raw_content", "images", "links", "cache_hit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExtractResult:
        """Create an instance of ExtractResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if images (nullable) is None
        # and __fields_set__ contains the field
        if self.images is None and "images" in self.__fields_set__:
            _dict['images'] = None

        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExtractResult:
        """Create an instance of ExtractResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExtractResult.parse_obj(obj)

        _obj = ExtractResult.parse_obj({
            "url": obj.get("url"),
            "raw_content": obj.get("raw_content"),
            "images": obj.get("images"),
            "links": obj.get("links"),
            "cache_hit": obj.get("cache_hit") if obj.get("cache_hit") is not None else False
        })
        return _obj


