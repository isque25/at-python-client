# coding: utf-8

"""
    \"Agent Toolkit: LLM-Friendly Tools and Search APIs\"

    API for LLM-friendly web search and content retrieval

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from at_client.models.search_result import SearchResult

class SearchResponse(BaseModel):
    """
    Schema for the search response  # noqa: E501
    """
    query: StrictStr = Field(default=..., description="The search query that was processed")
    results: conlist(SearchResult) = Field(default=..., description="List of search results")
    summary: Optional[StrictStr] = None
    topic: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    result_count: Optional[StrictInt] = Field(default=0, description="Number of results returned")
    applied_filters: Optional[Dict[str, Any]] = None
    selenium_enhancement: Optional[StrictBool] = None
    enhanced_results_count: Optional[StrictInt] = None
    __properties = ["query", "results", "summary", "topic", "language", "country", "result_count", "applied_filters", "selenium_enhancement", "enhanced_results_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchResponse:
        """Create an instance of SearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        # set to None if summary (nullable) is None
        # and __fields_set__ contains the field
        if self.summary is None and "summary" in self.__fields_set__:
            _dict['summary'] = None

        # set to None if topic (nullable) is None
        # and __fields_set__ contains the field
        if self.topic is None and "topic" in self.__fields_set__:
            _dict['topic'] = None

        # set to None if language (nullable) is None
        # and __fields_set__ contains the field
        if self.language is None and "language" in self.__fields_set__:
            _dict['language'] = None

        # set to None if country (nullable) is None
        # and __fields_set__ contains the field
        if self.country is None and "country" in self.__fields_set__:
            _dict['country'] = None

        # set to None if applied_filters (nullable) is None
        # and __fields_set__ contains the field
        if self.applied_filters is None and "applied_filters" in self.__fields_set__:
            _dict['applied_filters'] = None

        # set to None if selenium_enhancement (nullable) is None
        # and __fields_set__ contains the field
        if self.selenium_enhancement is None and "selenium_enhancement" in self.__fields_set__:
            _dict['selenium_enhancement'] = None

        # set to None if enhanced_results_count (nullable) is None
        # and __fields_set__ contains the field
        if self.enhanced_results_count is None and "enhanced_results_count" in self.__fields_set__:
            _dict['enhanced_results_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchResponse:
        """Create an instance of SearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchResponse.parse_obj(obj)

        _obj = SearchResponse.parse_obj({
            "query": obj.get("query"),
            "results": [SearchResult.from_dict(_item) for _item in obj.get("results")] if obj.get("results") is not None else None,
            "summary": obj.get("summary"),
            "topic": obj.get("topic"),
            "language": obj.get("language"),
            "country": obj.get("country"),
            "result_count": obj.get("result_count") if obj.get("result_count") is not None else 0,
            "applied_filters": obj.get("applied_filters"),
            "selenium_enhancement": obj.get("selenium_enhancement"),
            "enhanced_results_count": obj.get("enhanced_results_count")
        })
        return _obj


