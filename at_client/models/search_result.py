# coding: utf-8

"""
    \"Agent Toolkit: LLM-Friendly Tools and Search APIs\"

    API for LLM-friendly web search and content retrieval

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class SearchResult(BaseModel):
    """
    Schema for a single search result  # noqa: E501
    """
    title: StrictStr = Field(default=..., description="The title of the search result")
    snippet: StrictStr = Field(default=..., description="A clean summary or snippet from the search result")
    url: constr(strict=True, max_length=2083, min_length=1) = Field(default=..., description="The URL of the search result")
    published_date: Optional[date] = None
    modified_date: Optional[date] = None
    crawl_date: Optional[date] = None
    domain: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    enhanced_with_selenium: Optional[StrictBool] = None
    __properties = ["title", "snippet", "url", "published_date", "modified_date", "crawl_date", "domain", "language", "country", "enhanced_with_selenium"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchResult:
        """Create an instance of SearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if published_date (nullable) is None
        # and __fields_set__ contains the field
        if self.published_date is None and "published_date" in self.__fields_set__:
            _dict['published_date'] = None

        # set to None if modified_date (nullable) is None
        # and __fields_set__ contains the field
        if self.modified_date is None and "modified_date" in self.__fields_set__:
            _dict['modified_date'] = None

        # set to None if crawl_date (nullable) is None
        # and __fields_set__ contains the field
        if self.crawl_date is None and "crawl_date" in self.__fields_set__:
            _dict['crawl_date'] = None

        # set to None if domain (nullable) is None
        # and __fields_set__ contains the field
        if self.domain is None and "domain" in self.__fields_set__:
            _dict['domain'] = None

        # set to None if language (nullable) is None
        # and __fields_set__ contains the field
        if self.language is None and "language" in self.__fields_set__:
            _dict['language'] = None

        # set to None if country (nullable) is None
        # and __fields_set__ contains the field
        if self.country is None and "country" in self.__fields_set__:
            _dict['country'] = None

        # set to None if enhanced_with_selenium (nullable) is None
        # and __fields_set__ contains the field
        if self.enhanced_with_selenium is None and "enhanced_with_selenium" in self.__fields_set__:
            _dict['enhanced_with_selenium'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchResult:
        """Create an instance of SearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchResult.parse_obj(obj)

        _obj = SearchResult.parse_obj({
            "title": obj.get("title"),
            "snippet": obj.get("snippet"),
            "url": obj.get("url"),
            "published_date": obj.get("published_date"),
            "modified_date": obj.get("modified_date"),
            "crawl_date": obj.get("crawl_date"),
            "domain": obj.get("domain"),
            "language": obj.get("language"),
            "country": obj.get("country"),
            "enhanced_with_selenium": obj.get("enhanced_with_selenium")
        })
        return _obj


